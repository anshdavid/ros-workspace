#!/usr/bin/env python3

import os
import select
import sys

import numpy
import rospy
from geometry_msgs.msg import Twist
from sensor_msgs.msg import Joy

if os.name == 'nt':
    import msvcrt
else:
    import termios
    import tty

_G_MAX_LIN_VEL = 1
_G_MAX_ANG_VEL = 2

LIN_VEL_STEP_SIZE = 0.1
ANG_VEL_STEP_SIZE = 0.1

msg = """
Control Your TurtleBot3!
---------------------------
Moving around:
        w
   a    s    d
        x

w/x : increase/decrease linear velocity
a/d : increase/decrease angular velocity
space key, s : force stop

CTRL-C to quit
"""

e = """
Communications Failed
"""

def getKey():
    if os.name == 'nt':
      return msvcrt.getch() #type:ignore

    tty.setraw(sys.stdin.fileno())
    rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
    if rlist:
        key = sys.stdin.read(1)
    else:
        key = ''

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key


def vels(target_linear_vel, target_angular_vel):
    return "currently:\tlinear vel %s\t angular vel %s " % (target_linear_vel,target_angular_vel)


def makeSimpleProfile(output, input, slop):
    if input > output:
        output = min( input, output + slop )
    elif input < output:
        output = max( input, output - slop )
    else:
        output = input

    return output


def constrain(input, low, high):
    if input < low:
        input = low
    elif input > high:
        input = high
    else:
        input = input

    return input


def checkLinearLimitVelocity(vel):
    return constrain(vel, -_G_MAX_LIN_VEL, _G_MAX_LIN_VEL)


def checkAngularLimitVelocity(vel):
    return constrain(vel, -_G_MAX_ANG_VEL, _G_MAX_ANG_VEL)


if __name__=="__main__":
    if os.name != 'nt':
        settings = termios.tcgetattr(sys.stdin) #type:ignore

    rospy.init_node('teleopToJoy', anonymous=True)
    pub = rospy.Publisher("joy", Joy, queue_size = 10)

    turtlebot3_model = rospy.get_param("model", "burger")

    status = 0
    target_linear_vel   = 0.0
    target_angular_vel  = 0.0
    control_linear_vel  = 0.0
    control_angular_vel = 0.0

    try:
        print(msg)
        while(1):
            rate = rospy.Rate(10) # 10hz

            key = getKey()
            if key == 'w' :
                if target_angular_vel != target_linear_vel:
                    target_angular_vel = target_linear_vel
                else:
                    target_linear_vel = checkLinearLimitVelocity(target_linear_vel + LIN_VEL_STEP_SIZE)
                    target_angular_vel = target_linear_vel
                    status = status + 1
                print(vels(target_linear_vel,target_angular_vel))

            elif key == 'x' :
                if target_angular_vel != target_linear_vel:
                    target_angular_vel = target_linear_vel
                else:
                    target_linear_vel = checkLinearLimitVelocity(target_linear_vel - LIN_VEL_STEP_SIZE)
                    target_angular_vel = target_linear_vel
                    status = status + 1
                print(vels(target_linear_vel,target_angular_vel))

            elif key == 'a' :
                target_angular_vel = checkAngularLimitVelocity(target_angular_vel + ANG_VEL_STEP_SIZE)
                status = status + 1
                print(vels(target_linear_vel,target_angular_vel))

            elif key == 'd' :
                target_angular_vel = checkAngularLimitVelocity(target_angular_vel - ANG_VEL_STEP_SIZE)
                status = status + 1
                print(vels(target_linear_vel,target_angular_vel))

            elif key == ' ' or key == 's' :
                target_linear_vel   = 0.0
                control_linear_vel  = 0.0
                target_angular_vel  = 0.0
                control_angular_vel = 0.0
                print(vels(target_linear_vel, target_angular_vel))

            else:
                if (key == '\x03'):
                    break

            if status == 10 :
                print(msg)
                status = 0

            msg = Joy()
            msg.axes = []
            msg.buttons = []

            control_linear_vel = makeSimpleProfile(control_linear_vel, target_linear_vel, (LIN_VEL_STEP_SIZE/2.0))
            control_angular_vel = makeSimpleProfile(control_angular_vel, target_angular_vel, (ANG_VEL_STEP_SIZE/2.0))

            msg.axes.append(control_linear_vel*5)
            msg.axes.append(control_angular_vel*5)
            pub.publish(msg)
            rate.sleep()

    except:
        print(e)

    if os.name != 'nt':
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings) #type:ignore
